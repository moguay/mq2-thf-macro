| AutoRaid by moguay v1.0 - moguayv@gmail.com

Sub main

|--------------------------------------------------------------------------
| - 0 configuration
| Features for raid fight logic
| - Classes priority
| - Balanced power bots
| - Priority balanced Melee group and Caster/Pet group
| - TANK/Offtank, Healer and Bard have a specific repartition logic

| -------------------------------------------------------------------------
| Init advanced raid calculation
| -------------------------------------------------------------------------

    | Function declare for broadcasting
    /if (!${Defined[functionName]}) /declare functionName string local
    /varset functionName Auto Raid

    | Broadcasting configuration
    /if (!${Defined[echo]}) /declare echo string global ${If[${Plugin[MQ2CEcho].Name.Equal[MQ2CEcho]},cecho,echo]}

    | Support broadcasting
    /if (!${Defined[MacroSupport]}) /declare MacroSupport string local [+r+]#[+x+] [+m+]You like and want to support this development[+x+], [+r+]you can donate[+x+]: https://paypal.me/moguay

    /if (${echo.NotEqual[cecho]}) {
        /docommand /bct ${Me.CleanName} ${MacroSupport}
        /docommand /${echo} [${functionName}] by moguay v1.0 - moguayv@gmail.com
    }

    | Calculation speed management
    /if (${Plugin[MQ2Turbo].Name.Equal[MQ2Turbo]}) {
        /squelch /turbo 2000
        /docommand /${echo} [${functionName}]: Calculation mode activated in [ludicrous speed]
    } else {
        /docommand /${echo} [${functionName}]: Calculation mode activated in [turtle speed]
    }

    | Enable function statistic
    /declare FormRaidTimer timer local 1000s

    | Disbanding group and raid
    /bcaa //raiddis
    /bcaa //disband

    | Loops vars
    /if (!${Defined[e]}) /declare e int local
    /if (!${Defined[f]}) /declare f int local
    /if (!${Defined[g]}) /declare g int local
    /if (!${Defined[h]}) /declare h int local
    /if (!${Defined[i]}) /declare i int local
    /if (!${Defined[j]}) /declare j int local
    /if (!${Defined[k]}) /declare k int local
    /if (!${Defined[l]}) /declare l int local
    /if (!${Defined[m]}) /declare m int local
    /if (!${Defined[n]}) /declare n int local

| -------------------------------------------------------------------------
| Sorted Class list
| -------------------------------------------------------------------------

    /declare GROUP_TYPE[2]  string local
| Prio tank / melee
    /varset GROUP_TYPE[1]   WAR CLR/PAL BRD SHD ROG/BER/RNG/MNK ROG/BER/RNG/MNK ROG/BER/RNG/MNK ROG/BER/RNG/MNK ROG/BER/RNG/MNK NEC/MAG/BST NEC/MAG/BST NEC/MAG/BST NEC/MAG/BST NEC/MAG/BST WIZ/DRU/ENC WIZ/DRU/ENC WIZ/DRU/ENC WIZ/DRU/ENC WIZ/DRU/ENC SHM
| Prio offtank / caster / pet
    /varset GROUP_TYPE[2]   PAL SHM/CLR BRD NEC/MAG/BST NEC/MAG/BST NEC/MAG/BST NEC/MAG/BST NEC/MAG/BST WIZ/DRU/ENC WIZ/DRU/ENC WIZ/DRU/ENC WIZ/DRU/ENC WIZ/DRU/ENC WIZ/DRU/ENC WIZ/DRU/ENC WIZ/DRU/ENC WIZ/DRU/ENC WIZ/DRU/ENC SHM

| --- Some comment to the class list --- |
| ONE in group      CLR/PAL
| ONE in group      BRD
| Limited in raid   SHM
| MELEE             ROG/BER/RNG/MNK
| PET               NEC/MAG/BST
| NUKE              WIZ/DRU/ENC
| -------------------------------------- |

| -------------------------------------------------------------------------
| Main advanced raid calculation
| -------------------------------------------------------------------------

    /docommand /${echo} [${functionName}]: Sorting pc list (best to lower)...

	/declare BestClassOrder string local WAR SHD PAL CLR WIZ ROG BER RNG DRU SHM NEC MAG ENC BRD RNG MNK BST
	/declare BestNameOrder string local
	/declare BestNameOrderFind string local

	/declare PCMax string local

	/for f 1 to ${Math.Calc[${BestClassOrder.Count[ ]} + 1]}
		/for i 1 to ${NetBots.Counts}
			/if (!${BestNameOrderFind.Find[|${NetBots.Client[${i}]}|]}) {
			/if (${BestClassOrder.Arg[${f}, ].Equal[${NetBots[${NetBots.Client.Arg[${i}]}].Class.ShortName}]}) {
                :BestRetry
				/for j 1 to ${NetBots.Counts}
                    /if (${NetBots.Client.Arg[${j}].NotEqual[${NetBots.Client.Arg[${i}]}]}) {
					/if (!${BestNameOrderFind.Find[|${NetBots.Client[${j}]}|]}) {
					/if (${BestClassOrder.Arg[${f}, ].Equal[${NetBots[${NetBots.Client.Arg[${j}]}].Class.ShortName}]}) {
						| WAR,SHD,PAL,ROG,BER,BRD,MNK,RNG,BST
						/if (${Select[${NetBots[${NetBots.Client.Arg[${j}]}].Class.ShortName},WAR,SHD,PAL,ROG,BER,BRD,MNK,RNG,BST]}) {
							/if (${NetBots[${NetBots.Client.Arg[${j}]}].MaxHPs} > ${NetBots[${NetBots.Client.Arg[${i}]}].MaxHPs}) {
								/varset PCMax ${NetBots.Client[${j}]}
							}
						| DRU,ENC,MAG,WIZ,NEC,CLR,SHM
						} else {
							/if (${NetBots[${NetBots.Client.Arg[${j}]}].MaxMana} > ${NetBots[${NetBots.Client.Arg[${i}]}].MaxMana}) {
								/varset PCMax ${NetBots.Client[${j}]}
							}
						}
					}
					}
                    }
				/next j
                /if (${PCMax.Length}) {
                    /varset BestNameOrder ${BestNameOrder}${If[${Bool[${BestNameOrder}]},|,]}${PCMax}
                    /varset BestNameOrderFind |${BestNameOrder}|
                    /varset PCMax
                    /goto :BestRetry
                } else {
                    /varset PCMax ${NetBots.Client[${i}]}
                    /varset BestNameOrder ${BestNameOrder}${If[${Bool[${BestNameOrder}]},|,]}${PCMax}
                    /varset BestNameOrderFind |${BestNameOrder}|
                    /varset PCMax
                }
			}
			}
		/next i
	/next f

    /docommand /${echo} [${functionName}]: Calculate the number of group needed...

    | NUMBER_OF_GROUP = ARROUND UP (NB BOTS / 6)
    /if (${Math.Calc[${NetBots.Counts} / 6]} > ${Math.Calc[${NetBots.Counts} / 6].Int}) {
        /declare NUMBER_OF_GROUP ${Math.Calc[(${NetBots.Counts} / 6) + 1].Int}
    } else {
        /declare NUMBER_OF_GROUP ${Math.Calc[${NetBots.Counts} / 6].Int}
    }

    /docommand /${echo} [${functionName}]: Determine best master for each group...

    /declare GROUP_MASTER_LIST string local
    /declare GROUP_MASTER_LIST_FIND string local
    /declare GROUP_ALT_LIST string local
    /declare GROUP_ALT_LIST_FIND string local
    /declare INVITE_CMD string local
    /declare INVITE_LIST string local

    | Find all Master for each group
    :NextMasterSearch
    | CLASS GROUP_TYPE scan
    /for f 1 to 1
        | GROUP_TYPE scan
        /for j 1 to 2
            | Sub CLASS GROUP_TYPE scan
            /for l 1 to ${Math.Calc[${GROUP_TYPE[${j}].Arg[${f}, ].Count[/]} + 1]}
                | Netbots scan
                /for i 1 to ${Math.Calc[${BestNameOrder.Count[|]} + 1]}
                    | Rewrite var
                    /varset GROUP_MASTER_LIST_FIND |${GROUP_MASTER_LIST}|

                    | Exclude MASTERS and ALTS already called
                    /if (!${GROUP_MASTER_LIST_FIND.Find[|${BestNameOrder.Arg[${i},|]}#]}) {
                        | Find the bot class combination
                        /if (${GROUP_TYPE[${j}].Arg[${f}, ].Arg[${l},/].Equal[${NetBots[${BestNameOrder.Arg[${i},|]}].Class.ShortName}]}) {

                            || LIST GROUP_MASTER
                            /varset GROUP_MASTER_LIST ${GROUP_MASTER_LIST}${If[${Bool[${GROUP_MASTER_LIST}]},|,]}${BestNameOrder.Arg[${i},|]}#${j}

                            /if (${Math.Calc[${GROUP_MASTER_LIST.Count[|]} + 1].Int} >= ${NUMBER_OF_GROUP}) /goto :EndMasterSearch
                            /goto :NextMasterSearch
                        }
                    }
                /next i
            /next l
        /next j
    /next f
    :EndMasterSearch

    | Not found - Find only all best bot to determine Master for each group
    /if (!${GROUP_MASTER_LIST.Length}) {
        :NextMasterSearch2
            | Netbots scan
            /for i 1 to ${Math.Calc[${BestNameOrder.Count[|]} + 1]}
                | Rewrite var
                /varset GROUP_MASTER_LIST_FIND |${GROUP_MASTER_LIST}|

                | Exclude MASTERS and ALTS already called
                /if (!${GROUP_MASTER_LIST_FIND.Find[|${BestNameOrder.Arg[${i},|]}#]}) {
                    || LIST GROUP_MASTER
                    /varset GROUP_MASTER_LIST ${GROUP_MASTER_LIST}${If[${Bool[${GROUP_MASTER_LIST}]},|,]}${BestNameOrder.Arg[${i},|]}#${j}

                    /if (${Math.Calc[${GROUP_MASTER_LIST.Count[|]} + 1].Int} >= ${NUMBER_OF_GROUP}) /goto :EndMasterSearch2
                    /goto :NextMasterSearch2
                }
            /next i
        :EndMasterSearch2
    }

    | /echo [${NUMBER_OF_GROUP}]GROUP_MASTER_LIST=${GROUP_MASTER_LIST}

    /if (${NUMBER_OF_GROUP} == 0) {
        /docommand /${echo} [${functionName}]: BUG, cant make group(s)
        
    || ONE GROUP_MASTER
    } else /if (${NUMBER_OF_GROUP} == 1) {
        | Rewrite var
        /varset e 1
        /if (!${Defined[INVITE_CMD${e}]})   /declare INVITE_CMD${e} string local
        /if (!${Defined[INVITE_LIST${e}]})  /declare INVITE_LIST${e} string local
        
        /varset GROUP_MASTER_LIST_FIND |${GROUP_MASTER_LIST}|
        
        | Netbots scan
        /for i 1 to ${Math.Calc[${BestNameOrder.Count[|]} + 1]}
            | Exclude MASTERS and ALTS already called
            /if (!${GROUP_MASTER_LIST_FIND.Find[|${BestNameOrder.Arg[${i},|]}#]}) {
                                /varset INVITE_CMD${e} ${INVITE_CMD${e}}; /invite ${BestNameOrder.Arg[${i},|]}
                                /varset INVITE_LIST${e} ${INVITE_LIST${e}}${If[${Bool[${INVITE_LIST${e}}]}, ,]}${NetBots[${BestNameOrder.Arg[${i},|]}].Class.ShortName}:${BestNameOrder.Arg[${i},|]}
                                /varset GROUP_ALT_LIST ${GROUP_ALT_LIST}${If[${Bool[${GROUP_ALT_LIST}]},|,]}${BestNameOrder.Arg[${i},|]}
            }
        /next i

        /docommand /${echo} [${functionName}]: Send Master[${GROUP_MASTER_LIST.Arg[1,|].Arg[1,#]}] invite : ${INVITE_LIST${e}}
        /bct ${GROUP_MASTER_LIST.Arg[1,|].Arg[1,#]} //multiline ; ${INVITE_CMD${e}}

    || MULTIPLE GROUP_MASTER
    } else /if (${NUMBER_OF_GROUP} > 1) {
        /varset GROUP_MASTER_LIST_FIND |${GROUP_MASTER_LIST}|

        | Reset var
        /varset INVITE_CMD
        /varset INVITE_LIST

        /docommand /${echo} [${functionName}]: Determine best alt for each group...(Power and Class balanced on pairs of groups) wait...

        /for f 2 to 20

            | GROUP scan ||| ${NUMBER_OF_GROUP}
            /for e 1 to ${Math.Calc[${GROUP_MASTER_LIST.Count[|]} + 1].Int}
                /if (!${Defined[INVITE_CMD${e}]})   /declare INVITE_CMD${e} string local
                /if (!${Defined[INVITE_LIST${e}]})  /declare INVITE_LIST${e} string local

                | GROUP_TYPE scan
                /varset j 1
                /if (${Int[${GROUP_MASTER_LIST.Arg[${e},|].Arg[2,#]}]}) /varset j ${Int[${GROUP_MASTER_LIST.Arg[${e},|].Arg[2,#]}]}

                | Sub CLASS GROUP_TYPE scan
                /for l 1 to ${Math.Calc[${GROUP_TYPE[${j}].Arg[${f}, ].Count[/]} + 1]}
                    | Netbots scan
                    /for i 1 to ${Math.Calc[${BestNameOrder.Count[|]} + 1]}
                        | Rewrite var
                        /varset GROUP_ALT_LIST_FIND |${GROUP_ALT_LIST}|
                        | Exclude FULL List
                        /if (!((${Int[${GROUP_MASTER_LIST.Arg[${e},|].Arg[2,#]}]} && ${Math.Calc[${INVITE_LIST${e}.Count[ ]} + 1].Int} >= 5) || (!${Int[${GROUP_MASTER_LIST.Arg[${e},|].Arg[2,#]}]} && ${Math.Calc[${INVITE_LIST${e}.Count[ ]} + 1].Int} >= 6))) {
                        | Exclude MASTERS and ALTS already called
                        /if (!${GROUP_MASTER_LIST_FIND.Find[|${BestNameOrder.Arg[${i},|]}#]} && !${GROUP_ALT_LIST_FIND.Find[|${BestNameOrder.Arg[${i},|]}|]}) {
                            | Find the bot class combination
                            /if (${GROUP_TYPE[${j}].Arg[${f}, ].Arg[${l},/].Equal[${NetBots[${BestNameOrder.Arg[${i},|]}].Class.ShortName}]} || !${Int[${GROUP_MASTER_LIST.Arg[${e},|].Arg[2,#]}]}) {
                                /varset INVITE_CMD${e} ${INVITE_CMD${e}}; /invite ${BestNameOrder.Arg[${i},|]}
                                /varset INVITE_LIST${e} ${INVITE_LIST${e}}${If[${Bool[${INVITE_LIST${e}}]}, ,]}${NetBots[${BestNameOrder.Arg[${i},|]}].Class.ShortName}:${BestNameOrder.Arg[${i},|]}
                                /varset GROUP_ALT_LIST ${GROUP_ALT_LIST}${If[${Bool[${GROUP_ALT_LIST}]},|,]}${BestNameOrder.Arg[${i},|]}

                                /goto :NextAltSearch
                            }
                        }
                        }
                    /next i
                /next l
                :NextAltSearch
            /next e
        /next f

        /docommand /${echo} [${functionName}]: Arrange off alt... wait...

        /if (${Math.Calc[${GROUP_MASTER_LIST.Count[|]} + 1].Int} < ${NUMBER_OF_GROUP}) {
            /for f 2 to 20
                | UNGROUPED GROUP scan
                /varset e ${Math.Calc[${GROUP_MASTER_LIST.Count[|]} + 2].Int}

                /if (!${Defined[INVITE_CMD${e}]})   /declare INVITE_CMD${e} string local
                /if (!${Defined[INVITE_LIST${e}]})  /declare INVITE_LIST${e} string local

                | Netbots scan
                /for i 1 to ${Math.Calc[${BestNameOrder.Count[|]} + 1]}
                    | Rewrite var
                    /varset GROUP_ALT_LIST_FIND |${GROUP_ALT_LIST}|
                    | Exclude FULL List
                    /if (!((${Int[${GROUP_MASTER_LIST.Arg[${e},|].Arg[2,#]}]} && ${Math.Calc[${INVITE_LIST${e}.Count[ ]} + 1].Int} >= 5) || (!${Int[${GROUP_MASTER_LIST.Arg[${e},|].Arg[2,#]}]} && ${Math.Calc[${INVITE_LIST${e}.Count[ ]} + 1].Int} >= 6))) {
                    | Exclude MASTERS and ALTS already called
                    /if (!${GROUP_MASTER_LIST_FIND.Find[|${BestNameOrder.Arg[${i},|]}#]} && !${GROUP_ALT_LIST_FIND.Find[|${BestNameOrder.Arg[${i},|]}|]}) {
                        /if (!${GROUP_MASTER_LIST.Find[#3]}) {
                            /varset GROUP_MASTER_LIST ${GROUP_MASTER_LIST}${If[${Bool[${GROUP_MASTER_LIST}]},|,]}${BestNameOrder.Arg[${i},|]}#3
                        } else {
                            /varset INVITE_CMD${e} ${INVITE_CMD${e}}; /invite ${BestNameOrder.Arg[${i},|]}
                            /varset INVITE_LIST${e} ${INVITE_LIST${e}}${If[${Bool[${INVITE_LIST${e}}]}, ,]}${NetBots[${BestNameOrder.Arg[${i},|]}].Class.ShortName}:${BestNameOrder.Arg[${i},|]}
                            /varset GROUP_ALT_LIST ${GROUP_ALT_LIST}${If[${Bool[${GROUP_ALT_LIST}]},|,]}${BestNameOrder.Arg[${i},|]}
                        }
                    }
                    }
                /next i
            /next f
        }

        | GROUP Send invite
        /for e 1 to ${NUMBER_OF_GROUP}
            /docommand /${echo} [${functionName}]: Send Master[${GROUP_MASTER_LIST.Arg[${e},|].Arg[1,#]}] invite : ${INVITE_LIST${e}}
            /bct ${GROUP_MASTER_LIST.Arg[${e},|].Arg[1,#]} //multiline ; ${INVITE_CMD${e}}
        /next e

        /delay 5

        | RAID Send invite
        /for e 1 to ${Math.Calc[${GROUP_MASTER_LIST.Count[|]} + 1].Int}
            /docommand /${echo} [${functionName}]: Send raidinvite request to <${GROUP_MASTER_LIST.Arg[${e},|].Arg[1,#]}>
            /if (${e} > 1) {
                /bct ${GROUP_MASTER_LIST.Arg[1,|].Arg[1,#]} //multiline ; /docommand /${echo} [Form ${Param0}]: Send raidinvite to group leader <${GROUP_MASTER_LIST.Arg[${e},|].Arg[1,#]}>; /raidinvite ${GROUP_MASTER_LIST.Arg[${e},|].Arg[1,#]}
            }
        /next e

        /delay 2s

        | ACCEPT Send
        /for e 1 to ${Math.Calc[${GROUP_MASTER_LIST.Count[|]} + 1].Int}
            /if (${e} > 1) {
                /bct ${GROUP_MASTER_LIST.Arg[${e},|].Arg[1,#]} //docommand /nomodkey /notify ConfirmationDialogBox Yes_Button leftmouseup
            }
        /next e

    }

    /if (${Plugin[MQ2Turbo].Name.Equal[MQ2Turbo]}) /squelch /turbo 120

    /docommand /${echo} [${functionName}]: nbr of pc: [${Math.Calc[${GROUP_MASTER_LIST.Count[|]} + 1 + ${GROUP_ALT_LIST.Count[|]}].Int}] done in (${Math.Calc[(10000-${FormRaidTimer})/10]}s)

/return