#define MAX_AUG_SLOTS 10

Sub Main
    /if (!${Defined[echo]})         /declare echo       string    outer echo
    /if (!${Defined[broadcast]})    /declare broadcast  int       outer 1
    
    | Set Self Echo or Cecho advanced color echo plugin
    | Color code format: "[+r+] or [+R+]"
    | 'y'ellow, 'o'range, 'g'reen, bl'u'e, 'r'ed, 't'eal, 'b'lack (none),
    | 'm'agenta, 'p'urple, 'w'hite, 'x'=back to default
    /if (!${Defined[echo]})                                                     /declare echo string global
    /varset echo                                                                                                                                ${If[${Plugin[MQ2CEcho].Name.Equal[MQ2CEcho]},cecho,echo]}

    /if (!${Defined[CError]})                                                   /declare CError string global
    /if (!${Defined[CCritical]})                                                /declare CCritical string global
    /if (!${Defined[CWarning]})                                                 /declare CWarning string global
    /if (!${Defined[CNotice]})                                                  /declare CNotice string global
    /if (!${Defined[CNormal]})                                                  /declare CNormal string global
    /if (!${Defined[CAction]})                                                  /declare CAction string global
    /if (!${Defined[Cy]})                                                       /declare Cy string global
    /if (!${Defined[Co]})                                                       /declare Co string global
    /if (!${Defined[Cg]})                                                       /declare Cg string global
    /if (!${Defined[Cu]})                                                       /declare Cu string global
    /if (!${Defined[Cr]})                                                       /declare Cr string global
    /if (!${Defined[Ct]})                                                       /declare Ct string global
    /if (!${Defined[Cb]})                                                       /declare Cb string global
    /if (!${Defined[Cm]})                                                       /declare Cm string global
    /if (!${Defined[Cp]})                                                       /declare Cp string global
    /if (!${Defined[Cw]})                                                       /declare Cw string global
    /if (!${Defined[Cx]})                                                       /declare Cx string global

    /varset CError                                                                                                                              ${If[${Plugin[MQ2CEcho].Name.Equal[MQ2CEcho]},[+r+],]}
    /varset CCritical                                                                                                                           ${If[${Plugin[MQ2CEcho].Name.Equal[MQ2CEcho]},[+m+],]}
    /varset CWarning                                                                                                                            ${If[${Plugin[MQ2CEcho].Name.Equal[MQ2CEcho]},[+y+],]}
    /varset CNotice                                                                                                                             ${If[${Plugin[MQ2CEcho].Name.Equal[MQ2CEcho]},[+t+],]}
    /varset CNormal                                                                                                                             ${If[${Plugin[MQ2CEcho].Name.Equal[MQ2CEcho]},[+x+],]}
    /varset CAction                                                                                                                             ${If[${Plugin[MQ2CEcho].Name.Equal[MQ2CEcho]},[+u+],]}
    /varset Cy                                                                                                                                  ${If[${Plugin[MQ2CEcho].Name.Equal[MQ2CEcho]},[+y+],]}
    /varset Co                                                                                                                                  ${If[${Plugin[MQ2CEcho].Name.Equal[MQ2CEcho]},[+o+],]}
    /varset Cg                                                                                                                                  ${If[${Plugin[MQ2CEcho].Name.Equal[MQ2CEcho]},[+g+],]}
    /varset Cu                                                                                                                                  ${If[${Plugin[MQ2CEcho].Name.Equal[MQ2CEcho]},[+u+],]}
    /varset Cr                                                                                                                                  ${If[${Plugin[MQ2CEcho].Name.Equal[MQ2CEcho]},[+r+],]}
    /varset Ct                                                                                                                                  ${If[${Plugin[MQ2CEcho].Name.Equal[MQ2CEcho]},[+t+],]}
    /varset Cb                                                                                                                                  ${If[${Plugin[MQ2CEcho].Name.Equal[MQ2CEcho]},[+b+],]}
    /varset Cm                                                                                                                                  ${If[${Plugin[MQ2CEcho].Name.Equal[MQ2CEcho]},[+m+],]}
    /varset Cp                                                                                                                                  ${If[${Plugin[MQ2CEcho].Name.Equal[MQ2CEcho]},[+p+],]}
    /varset Cw                                                                                                                                  ${If[${Plugin[MQ2CEcho].Name.Equal[MQ2CEcho]},[+w+],]}
    /varset Cx                                                                                                                                  ${If[${Plugin[MQ2CEcho].Name.Equal[MQ2CEcho]},[+x+],]}
    
    /declare i int local
    
    /if (${broadcast}==1) /docommand /${echo} [InventoryAug]: INC...
    /for i 0 to 20
        /call MissingAugs ${InvSlot[${i}].Name}
    /next i
    /if (${broadcast}==1) /docommand /${echo} [InventoryAug]: Done.
/return

Sub MissingAugs(string SLOTNAME, string argCMD)

    /declare x int local
    /declare range int local ${Me.Inventory[${SLOTNAME}].Augs}

    /declare itemScore int local

    /declare bct_command string local bcaa

    /for x 1 to ${range}
        /if (${Me.Inventory[${SLOTNAME}].AugSlot${x}}) {
            /if (${Select[${Me.Class.ShortName},WAR,SHD,PAL]})                  /varcalc itemScore (${Me.Inventory[${SLOTNAME}].Item[${x}].AC} * 5) + ${Me.Inventory[${SLOTNAME}].Item[${x}].HP} + (${Me.Inventory[${SLOTNAME}].Item[${x}].Attack} * 5)
            /if (${Select[${Me.Class.ShortName},ROG]})                          /varcalc itemScore (${Me.Inventory[${SLOTNAME}].Item[${x}].AC} * 5) + ${Me.Inventory[${SLOTNAME}].Item[${x}].HP} + (${Me.Inventory[${SLOTNAME}].Item[${x}].Attack} * 5) 
            |.BackstabDamage
            /if (${Select[${Me.Class.ShortName},BER,BRD,MNK,RNG,BST]})          /varcalc itemScore (${Me.Inventory[${SLOTNAME}].Item[${x}].AC} * 5) + ${Me.Inventory[${SLOTNAME}].Item[${x}].HP} + (${Me.Inventory[${SLOTNAME}].Item[${x}].Attack} * 5)
            /if (${Select[${Me.Class.ShortName},DRU,ENC,MAG,WIZ,NEC]})          /varcalc itemScore ${Me.Inventory[${SLOTNAME}].Item[${x}].Mana}     + ${Me.Inventory[${SLOTNAME}].Item[${x}].HP} + (${Me.Inventory[${SLOTNAME}].Item[${x}].SpellDamage} * 5)
            /if (${Select[${Me.Class.ShortName},CLR,SHM]})                      /varcalc itemScore ${Me.Inventory[${SLOTNAME}].Item[${x}].Mana}     + ${Me.Inventory[${SLOTNAME}].Item[${x}].HP} + (${Me.Inventory[${SLOTNAME}].Item[${x}].HealAmount} * 5)
                
            /if (!${Bool[${Me.Inventory[${SLOTNAME}].Item[${x}]}]} && ${Me.Inventory[${SLOTNAME}].AugSlot${x}}) {
                /if (${broadcast}==1) /docommand /${echo} [Missing Augs]: ${Cg}${SLOTNAME}${Cx} Slot:${Cr}${x}${Cx} - Type:${Cr}${Me.Inventory[${SLOTNAME}].AugSlot${x}}${Cx} - Score:${Cm}${itemScore}${Cx}
                /call BankFind "" "${SLOTNAME}" "Augmentation" ${Me.Inventory[${SLOTNAME}].AugSlot${x}} ${argCMD}
                
            } else /if (${Bool[${Me.Inventory[${SLOTNAME}].Item[${x}]}]} && ${Me.Inventory[${SLOTNAME}].AugSlot${x}}) {
                /if (${itemScore} < 200) {
                    /if (${broadcast}==1) /docommand /${echo} [Old Augs]: ${Cg}${SLOTNAME}${Cx} Slot:${Cr}${x}${Cx} - Type:${Cr}${Me.Inventory[${SLOTNAME}].AugSlot${x}}${Cx} - Score:${Cm}${itemScore}${Cx}
                    /call BankFind "" "${SLOTNAME}" "Augmentation" ${Me.Inventory[${SLOTNAME}].AugSlot${x}} ${argCMD}
                }
            }
        }
    /next x

/return

Sub BankFind(string strFindName, string strFindSlot, string strFindType, int intAugType, string argCMD)

    /declare i int local
    /declare e int local
    /declare j int local
    /declare itemName string local
    /declare itemScore int local
    /declare itemReturn string local
    /declare itemBestReturn string local

    /declare getAugBankName string local
    /declare getAugHohType string local

    /declare HohQuestAugName string local
    /declare HohQuestAugType string local

    /for i 1 to 24
        /varset itemName
        /if (${Me.Bank[${i}].Container}) {
            /for e 1 to ${Me.Bank[${i}].Container}
                /if (${Me.Bank[${i}].Item[${e}].ID}) {
                    /varset itemName ${Me.Bank[${i}].Item[${e}]}
                }
            /next e
        } else /if (${Me.Bank[${i}].ID}) {
            /varset itemName ${Me.Bank[${i}]}
            }
        }
        
        /if (${itemName.Length}) {
            | Score item
            /if (${Select[${Me.Class.ShortName},WAR,SHD,PAL]})                  /varcalc itemScore (${FindItemBank[${itemName}].AC} * 5) + ${FindItemBank[${itemName}].HP} + (${FindItemBank[${itemName}].Attack} * 5)
            /if (${Select[${Me.Class.ShortName},ROG]})                          /varcalc itemScore (${FindItemBank[${itemName}].AC} * 5) + ${FindItemBank[${itemName}].HP} + (${FindItemBank[${itemName}].Attack} * 5)
            /if (${Select[${Me.Class.ShortName},BER,BRD,MNK,RNG,BST]})          /varcalc itemScore (${FindItemBank[${itemName}].AC} * 5) + ${FindItemBank[${itemName}].HP} + (${FindItemBank[${itemName}].Attack} * 5)
            /if (${Select[${Me.Class.ShortName},DRU,ENC,MAG,WIZ,NEC]})          /varcalc itemScore ${FindItemBank[${itemName}].Mana}     + ${FindItemBank[${itemName}].HP} + (${FindItemBank[${itemName}].SpellDamage} * 5)
            /if (${Select[${Me.Class.ShortName},CLR,SHM]})                      /varcalc itemScore ${FindItemBank[${itemName}].Mana}     + ${FindItemBank[${itemName}].HP} + (${FindItemBank[${itemName}].HealAmount} * 5)
            
            | Aug Slot & Type finder
            |   Item Slot                                              && Item Type
            /if (${FindItemBank[${itemName}].WornSlot[${strFindSlot}]} && ${FindItemBank[${itemName}].Type.Equal[${strFindType}]}) {
                /if (${intAugType} && ${FindItemBank[${itemName}].Type.Equal[Augmentation]}) {
                    /call AugType ${FindItemBank[${itemName}].AugType} ${intAugType}
                    /if (${Macro.Return}) {
                        | Auto get HOH Aug
                        /if ((${itemName.Find[Radiant ]} || ${itemName.Find[Glowing ]})) {
                            /varset getAugBankName ${itemName}
                        }
            
                        | EqWindow Report
                        /call strArrayArg "${itemReturn}" "${itemName}" "|"
                        /varset itemReturn ${Macro.Return}
                        /if (!${itemBestReturn.Length} || ${itemScore} > ${itemBestReturn.Arg[2,|]}) /varset itemBestReturn ${itemName}|${itemScore}
                    }
                } else {
                    | EqWindow Report
                    /call strArrayArg "${itemReturn}" "${itemName}" "|"
                    /varset itemReturn ${Macro.Return}
                    /if (!${itemBestReturn.Length} || ${itemScore} > ${itemBestReturn.Arg[2,|]}) /varset itemBestReturn ${itemName}|${itemScore}
                }
            } else /if (!${getAugBankName.Length}) {
                /if (${Select[${intAugType},8,17,18]}) {
                    | HOH Craft AUG analysis
                    /varset HohQuestAugName Arm of Chaos|Belt of Chaos|Chest of Chaos|Cloak of Chaos|Earing of Chaos|Finger of Chaos|Foot of Chaos|Hand of Chaos|Head of Chaos|Leg of Chaos|Mask of Chaos|Necklace of Chaos|Shoulder of Chaos|Talisman of Chaos|Trinket of Chaos|Wrist of Chaos
                    /varset HohQuestAugType Arm|Belt|Chest|Cloak|Ear|Finger|Foot|Hand|Head|Leg|Face|Neck|Shoulder|Ranged|Charm|Wrist
                    /if (${HohQuestAugName.Find[${itemName}]}) {
                        /for j 1 to ${Math.Calc[${HohQuestAugName.Count[|]}+1]}
                            /if (${itemName.Lower.Equal[${HohQuestAugName.Arg[${j},|].Lower}]} && ${strFindSlot.Lower.Equal[${HohQuestAugType.Arg[${j},|].Lower}]}) {
                                /varset getAugBankName ${itemName}
                                /if (${Select[${Me.Class.ShortName},DRU,ENC,MAG,WIZ,NEC,CLR,SHM]}) {
                                    /if (${FindItemBankCount[Blue Marble]} >= 3) {
                                        /varset getAugBankName ${getAugBankName}|Blue Marble|Blue Marble|Blue Marble
                                    }
                                } else /if (!${Select[${Me.Class.ShortName},DRU,ENC,MAG,WIZ,NEC,CLR,SHM]}) {
                                    /if (${FindItemBankCount[Red Marble]} >= 3) {
                                        /varset getAugBankName ${getAugBankName}|Red Marble|Red Marble|Red Marble
                                    }
                                }
                            }
                        /next j
                    }
                }
            }
        }
    /next i

    /if (${getAugBankName.Length}) /call getAugBank "${getAugBankName}"
    | Auto turn HOH quest Augs
    | /call turnHohAug "${strFindSlot}" ${intAugType}
    | Auto buy HOH Augs
    | /call buyHohAug "${strFindSlot}" ${intAugType} ${argCMD}

    /if (${itemBestReturn.Length}) /docommand /${echo} Best: <${itemBestReturn}> -> (${itemReturn})

/return ${itemReturn}

Sub getAugBank(string strAugName)

    | Guild zone filter
    | /if (${Zone.ID} != 345) /return ZONE

    /declare i int local
    /declare j int local
    /declare e int local
    /declare strBankerName string local Stex
    /declare intItemInvCount int local
    /declare itemScore int local

    /declare OldMoveToDist  int     local   ${MoveTo.ArrivalDist}

    /for i 1 to ${Math.Calc[${strAugName.Count[|]}+1]}
        | Find item in Inventory
        /varset intItemInvCount 0
        /for j 23 to 30
            /if (${InvSlot[${j}].Item.Container}) {
                /for e 1 to ${InvSlot[${j}].Item.Container}
                    /if (${InvSlot[${j}].Item.Item[${e}].ID} && ${strAugName.Arg[${i},|].Equal[${InvSlot[${j}].Item.Item[${e}].Name}]}) {
                        | /varset itemName ${InvSlot[${j}].Item.Item[${e}].Name}
                        /varcalc intItemInvCount ${intItemInvCount} + ${InvSlot[${j}].Item.Item[${e}].Stack}
                    }
                /next e
            } else /if (${InvSlot[${j}].Item.ID} && ${strAugName.Arg[${i},|].Equal[${InvSlot[${j}].Item.Name}]}) {
                | /varset itemName ${InvSlot[${j}].Item.Name}
                /varcalc intItemInvCount ${intItemInvCount} + ${InvSlot[${j}].Item.Stack}
            }
        /next j

        /if (${intItemInvCount} < ${strAugName.Count[${strAugName.Arg[${i},|]}]}) {

            | Guild zone filter
            /if (${Zone.ID} != 345) {
                /if (${broadcast}==1) /docommand /${echo} [getAugBank] Get: Warning, need to be on GUILDHALL
                /return ZONE
            }

            /call CheckCursor

            /if (!${Me.FreeInventory}) {
                /if (${broadcast}==1) /docommand /${echo} [getAugBank] Get: Warning, need free inventory
                /return FALSE
            }

            /if (!${Spawn[NPC =${strBankerName}].ID}) {
                /if (${broadcast}==1) /docommand /${echo} [getAugBank] Get: Warning, no banker found
                /return FALSE
            }

            /target id ${Spawn[NPC =${strBankerName}].ID}
            /delay 5 (${Target.ID} == ${Spawn[NPC =${strBankerName}].ID})

            /if (${Target.Distance} > 18) {
                /squelch /moveto dist 18
                /delay 5
                /call InternalMoveToTimed ${Spawn[id ${Target.ID}].Y} ${Spawn[id ${Target.ID}].X} 5s
                /squelch /moveto dist ${OldMoveToDist}
                /if (!${Macro.Return}) {
                    /if (${broadcast}==1) ${broadcastMsg} [getAugBank] >>> ** Moving Problem ** <<<
                    /return FALSE
                }
            }

            /call openBags

            /if (!${Window[bigbankwnd].Open}) {
                /nomodkey /click right target
                /delay 5
                /delay 2s (${Window[bigbankwnd].Open})
                /if (!${Window[bigbankwnd].Open}) {
                    /if (${broadcast}==1) ${broadcastMsg} [getAugBank] >>> ** Bank window PROBLEM ** <<<
                    /return FALSE
                }
            }
            
            /if (${Select[${Me.Class.ShortName},WAR,SHD,PAL]})                  /varcalc itemScore (${FindItemBank[${strAugName.Arg[${i},|]}].AC} * 5) + ${FindItemBank[${strAugName.Arg[${i},|]}].HP} + (${FindItemBank[${strAugName.Arg[${i},|]}].Attack} * 5)
            /if (${Select[${Me.Class.ShortName},ROG]})                          /varcalc itemScore (${FindItemBank[${strAugName.Arg[${i},|]}].AC} * 5) + ${FindItemBank[${strAugName.Arg[${i},|]}].HP} + (${FindItemBank[${strAugName.Arg[${i},|]}].Attack} * 5)
            /if (${Select[${Me.Class.ShortName},BER,BRD,MNK,RNG,BST]})          /varcalc itemScore (${FindItemBank[${strAugName.Arg[${i},|]}].AC} * 5) + ${FindItemBank[${strAugName.Arg[${i},|]}].HP} + (${FindItemBank[${strAugName.Arg[${i},|]}].Attack} * 5)
            /if (${Select[${Me.Class.ShortName},DRU,ENC,MAG,WIZ,NEC]})          /varcalc itemScore ${FindItemBank[${strAugName.Arg[${i},|]}].Mana}     + ${FindItemBank[${strAugName.Arg[${i},|]}].HP} + (${FindItemBank[${strAugName.Arg[${i},|]}].SpellDamage} * 5)
            /if (${Select[${Me.Class.ShortName},CLR,SHM]})                      /varcalc itemScore ${FindItemBank[${strAugName.Arg[${i},|]}].Mana}     + ${FindItemBank[${strAugName.Arg[${i},|]}].HP} + (${FindItemBank[${strAugName.Arg[${i},|]}].HealAmount} * 5)

            /nomodkey /ctrl /itemnotify ${FindItemBank[${strAugName.Arg[${i},|]}].InvSlot} leftmouseup
            /delay 5

            /delay 1s (${Cursor.ID})
            /if (${Cursor.ID}) {
                /autoinventory
                /call CheckCursor
                
                /docommand /${echo} Bank: get aug <${strAugName.Arg[${i},|]}|${itemScore}>
            } else {
                /call CheckCursor
                /return FALSE
            }
        }
    /next i

    | Close BANK
    /notify BigBankWnd DoneButton leftmouseup
    | Re open bags
    /call openBags
/return ${strAugName}

Sub strArrayArg(string strArrayArg, string strAdd, strSeparator)
    /if (!${strArrayArg.Length}) {
        /varset strArrayArg ${strAdd}
    } else {
        /varset strArrayArg ${strArrayArg}${strSeparator}${strAdd}
    }
/return ${strArrayArg}

Sub AugType(int bitTotal, int typeSearch)
   | /declare bitTotal int local 133
   /declare augTypes[MAX_AUG_SLOTS] int local
   /declare i int local 1
   /declare augType int local 1

   :loop
      /if (${bitTotal} <= 0) {
         /if (!${slot}) {
            /echo No augs
         } else {
            /return FALSE
         }
         | Done
      } else /if (${bitTotal} == 1) {
         | Found a type 1
         /varset augTypes[${i}] 1
         | Done
      } else /if (${bitTotal} == 2) {
         | Found the type!
         /varcalc augTypes[${i}] ${augType} + 1
         | Done
      } else {
         /if (${Math.Calc[${bitTotal} % 2]} == 1) {
            | We found one of multiple types...
            /varset augTypes[${i}] ${augType}
            /varcalc bitTotal ${bitTotal} - 1
            /varcalc i ${i} + 1
         }
         /if (${bitTotal} != 2) {
            /varcalc bitTotal ${bitTotal} / 2
            /varcalc augType ${augType} + 1
         }
         /goto :loop
      }

   /for i 1 to MAX_AUG_SLOTS
      /if (${augTypes[${i}]} > 0) {
        /if (${typeSearch}) {
            /if (${augTypes[${i}]} == ${typeSearch}) /return TRUE
        } else {
            /echo Aug${i}: ${augTypes[${i}]}
        }
      }
   /next i

/return FALSE

Sub CheckCursor
     :ALauto_inv
          /if (${Cursor.ID}) {
                /if (${Cursor.NoDrop} && !${Me.FreeInventory}) /return
                /timed 5 /autoinventory
                /delay 2s !${Cursor.ID}
     /goto :ALauto_inv
     }
/return

Sub InternalMoveToTimed(int y, int x, string delay)
    /declare statDistance int local ${Math.Distance[${y},${x},${Me.Z}:${Me.Y},${Me.X},${Me.Z}]}
    /declare statTimer timer local 10000
    /declare maxSpeed int local ${Int[${Me.Speed}]}

    /if (${delay.Right[1].Equal[s]}) {
        | Manual
        /declare delayTimer timer local ${delay}
    } else {
        | Auto
        /declare delayTimer timer local ${Math.Calc[${statDistance} / (185 / 7)]}s
    }

    /if (${Math.Distance[${y},${x},${Me.Z}]} > ${MoveTo.ArrivalDist}) /moveto loc ${y} ${x}
    
:waitUntilMovingFinished
    /if (${Me.Speed} > ${maxSpeed}) {
        | Recalc real MaxSpeed and Delay
        /varset maxSpeed ${Int[${Me.Speed}]}
        /varset delayTimer ${Math.Calc[${statDistance} / (${maxSpeed} / 7)]}s
    }
    /if (!${delayTimer}) {
        /moveto off
        /return FALSE
    }
    /if (${Math.Distance[${y},${x},${Me.Z}]} > ${MoveTo.ArrivalDist}) {
        /call DoEvents
        /delay 1
        /goto :waitUntilMovingFinished
    }
    /echo Moving end. timer:${Math.Calc[(10000-${statTimer})/10]}s ,distance:${statDistance}
/return TRUE

Sub DoEvents
    /doevents
/return

Sub openBags
    /declare i int local
    /declare retryTimer timer local
    /declare miscTimer timer local

    /for i 1 to 8

        /varset miscTimer 30
        /if (${Me.Inventory[pack${i}].Container}) {

        :openBag
            /if (!${Window[pack${i}].Open}) {
                /itemnotify pack${i} rightmouseup
                /delay 5 ${Window[pack${i}].Open} || ${Window[TradeSkillWnd].Open}
                /if (!${Window[pack${i}].Open} && !${Window[TradeSkillWnd].Open} && ${miscTimer}) /goto :openBag

                /if (${Window[TradeSkillWnd].Open}) {
                    :openExperimentWnd
                    /notify TradeSkillWnd ExperimentButton leftmouseup
                    /delay 5 !${Window[TradeSkillWnd].Open}
                    /if (${Window[TradeSkillWnd].Open} && ${miscTimer}) /goto :openExperimentWnd
                }
            }
        }
    /next i
/return